1. Counting Sheep
const sheepsJumped = function(count) {
 if(count == 0) {
    console.log("All sheeps jumped over the fence");
 }
 else {
    console.log(`${count}:Another sheep jumps over the fence`);
    sheepsJumped(count-1);
 }
 }
 ************************
 let count = 3;
 sheepsJumped(count);
 ************************
 
2. Power Calculator
 var exponent = function(a, n) 
{
   if (n === 0) 
   {
    return 1;
    }
  else 
  { 
    console.log(`${a} * exponent(${a},${n-1})`);
    return a * exponent(a, n-1);
  }
};

console.log(exponent(2, 3));

 ******************************************
 Input : powerCalculator(2,3)
 Output : 2 * powerCalculator(2,2)
          2 * 2 * powerCalculator(2,1)
          2 * 2 * 2 * powerCalculator(2,0)
          2 * 2 * 2 * 1
 ******************************************
 
3. Reverse a String
function reverseString(str) {
  if (str === "") // This is the terminal case that will end the recursion
    return "";
  
  else {
    console.log()
    return reverseString(str.substr(1)) + str.charAt(0);
  }
}   

 ******************************************
 Input : Hello
 Output : 
 reverseString("ello") + "H"
reverseString("llo")  + "e" 
reverseString("lo")   + "l"
reverseString("o")  + "l"
reverseString("")  + "o"
olleH
 ******************************************
 
 4. nth triangular number

function tri(n){
  if(n <= 1){
    return n
  } else {
    return n + tri(n-1)
  }
}
  
 ******************************************
 Input : tri(6)
 Output : 5 + tri(4)
          5 + 4 + tri(3)
          5 + 4 + 3 + 2 + tri(1)
          5 + 4 + 3 + 2 + 1 + tri(0)
          15
 ******************************************
 
 5. String Splitter
 
 	let result = [];
function split(str, seperator) {

  if(str.length == 0){
    return "Empty String"
  }
  if(seperator.length == 0){
    return "No Seperator found."
  }
	// if str has the separator
    var n = str.search(seperator)
    if(n >= 0){
      // then push all the text before the separator into the result variable
	// and call split where the first argument is all the text after that separator
      result.push(str.slice(0,n))
      split(str.slice(n+1), seperator);
    }
    else {
      result.push(str);
      return `Seperator not found in the string. Returning string - ${str}`
    }
  
	// if the str doesn't have any more separators
	 return result;
}

 ******************************************
 Input : 02/20/2020
 Output : ["02", "20", "2020"]
 ******************************************
 
 6. Fibonacci
 
 let fibonacci = [];
fibonacci[0] = 0;
fibonacci[1] = 1;

function findFibonacci(num) {
  for (let i = 2; i < num; i++) {
  // Next fibonacci number = previous + one before previous
  fibonacci[i] = fibonacci[i - 2] + fibonacci[i - 1];
  } 

 return fibonacci;
}

******************************************
 Input : console.log(findFibonacci(3));
 Output : [ 0, 1, 1, 2, 3, 5, 8 ]
 ******************************************
 

 7. Factorial
 
 let factorial = 1;
  function findFactorial(n){
    if(n==1)
      return 1
    factorial = n * findFactorial(n-1);
    return factorial
  }

 ******************************************
 Input : findFactorial(5)
 Output : 5 * findFactorial(4)
 	  5 * 4 * findFactorial(3)
	  5 * 4 * 3 * findFactorial(2)
	  5 * 4 * 3 * 2 * findFactorial(1)
	  5 * 4 * 3 * 2 * 1
	  120
 ******************************************


10. Anagram
function getAllAnagrams(string) {
  var results = [];
  //Return string if string is a single character
  if (string.length === 1) {
    results.push(string);
    return results;
  }
  //Else define inner permutations
  for (let i = 0; i < string.length; i++) {
    var firstChar = string[i];
    var charLeft = string.substring(0,i)+ string.substring(i+1);
    var innerPermutations = getAllAnagrams(charLeft);
    for(let j =0; j<innerPermutations.length; j++){
      results.push(firstChar+innerPermutations[j]);
    }
  }
  return results;
}

*************************************************************
 Input : getAllAnagrams('east')
 Output : [ 'east', 'eats','esat','esta','etas','etsa',
 		'aest','aets','aset', 'aste','ates','atse',
 		'seat','seta','saet','sate','stea','stae',
		'teas','tesa','taes','tase','tsea','tsae' ]
 ************************************************************

 
 12. Binary Representation

const decimalToBinary = num => num === 0 ? 0 : num % 2 + 10 * decimalToBinary(Math.floor(num / 2));
 ******************************************
 Input :  console.log(decimalToBinary(17));
 Output : 10001
 ******************************************
 
 
 
